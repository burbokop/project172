#include "variant.h"


const unsigned Variant::TYPE_INT32 = 0;
const unsigned Variant::TYPE_INT64 = 1;
const unsigned Variant::TYPE_UINT32 = 2;
const unsigned Variant::TYPE_UINT64 = 3;
const unsigned Variant::TYPE_DOUBLE = 4;

const unsigned Variant::TYPE_VECTOR = 5;
const unsigned Variant::TYPE_OBJECT = 6;


Variant::Variant() : Object() {}

Variant::Variant(void *value) : Object() {
    pointer = reinterpret_cast<uintptr_t>(value);
    type = TYPE_OBJECT;
}

Variant::Variant(int value) : Object() {
    pointer = static_cast<uintptr_t>(value);
    type = TYPE_INT32;
}

Variant::Variant(long value) {
    pointer = static_cast<uintptr_t>(value);
    type = TYPE_INT64;
}

Variant::Variant(unsigned int value) {
    pointer = static_cast<uintptr_t>(value);
    type = TYPE_UINT32;
}

Variant::Variant(unsigned long value) {
    pointer = value;
    type = TYPE_UINT64;
}

Variant::Variant(double value) : Object() {
    pointer = verbatim_cast<double, uintptr_t>(value);
    type = TYPE_DOUBLE;
}

Variant::Variant(Vector value) : Object() {
    vectorValue = value;
    type = TYPE_VECTOR;
}

int Variant::toInt32() {
    if(type == TYPE_DOUBLE) {
        return static_cast<int>(toDouble());
    } else {
        return static_cast<int>(pointer);
    }
}

long Variant::toInt64() {
    if(type == TYPE_DOUBLE) {
        return static_cast<long>(toDouble());
    } else {
        return static_cast<long>(pointer);
    }
}

unsigned int Variant::toUint32() {
    if(type == TYPE_DOUBLE) {
        return static_cast<unsigned int>(toDouble());
    } else {
        return static_cast<unsigned int>(pointer);
    }
}

unsigned long Variant::toUint64() {
    if(type == TYPE_DOUBLE) {
        return static_cast<unsigned long>(toDouble());
    } else {
        return static_cast<unsigned long>(pointer);
    }
}

double Variant::toDouble() {
    return verbatim_cast<uintptr_t, double>(pointer);
}

Vector Variant::toVector() {
    return vectorValue;
}

void *Variant::toObject() {
    return reinterpret_cast<void*>(pointer);
}

bool Variant::isInt32() {
    return type == TYPE_INT32;
}

bool Variant::isInt64() {
    return type == TYPE_INT64;
}

bool Variant::isUint32() {
    return type == TYPE_UINT32;
}

bool Variant::isUint64() {
    return type == TYPE_UINT64;
}

bool Variant::isDouble() {
    return type == TYPE_DOUBLE;
}

bool Variant::isNumber() {
    return type <= TYPE_DOUBLE;
}

bool Variant::isVector() {
    return type == TYPE_VECTOR;
}

bool Variant::isObject() {
    return type == TYPE_OBJECT;
}
