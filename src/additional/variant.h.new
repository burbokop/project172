#ifndef AUTO_H
#define AUTO_H

#include <cstdint>

#include "additional/vector.h"
#include "object.h"


class Variant : public Object {
private:
    static const unsigned TYPE_INT32;
    static const unsigned TYPE_INT64;
    static const unsigned TYPE_UINT32;
    static const unsigned TYPE_UINT64;
    static const unsigned TYPE_DOUBLE;

    static const unsigned TYPE_VECTOR;
    static const unsigned TYPE_OBJECT;

    unsigned type;



    uintptr_t pointer = 0;
    Vector vectorValue = Vector();
public:
    Variant();
    Variant(void *value);
    Variant(int value);
    Variant(long value);
    Variant(unsigned int value);
    Variant(unsigned long value);
    Variant(double value);
    Variant(Vector value);

    int toInt32();
    long toInt64();
    unsigned int toUint32();
    unsigned long toUint64();    

    double toDouble();
    Vector toVector();
    void * toObject();

    bool isInt32();
    bool isInt64();
    bool isUint32();
    bool isUint64();
    bool isDouble();
    bool isNumber();

    bool isVector();
    bool isObject();
};

#endif // AUTO_H
